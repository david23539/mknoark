{"ast":null,"code":"import { ComponentFactory, ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { globalConstant } from '../../utils/constant';\nimport { ModalDefaultComponent } from '../modal-default/modal-default.component';\nimport * as i0 from \"@angular/core\";\nexport let ModalServiceDefaultService = /*#__PURE__*/(() => {\n  class ModalServiceDefaultService {\n    constructor(_componentFactoryResolver) {\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._$closeModal = new Subject();\n      this._paramsForModal = {\n        component: null,\n        params: null\n      };\n    }\n    /**\r\n     * @description This method construct and initialize the Modal\r\n     * @param componentClass. Is reference a Class of component show inside modal\r\n     * @param modalInterfaceIN. This param set configuration modal, set viewContentRef\r\n     * and params ComponentInside\r\n     * @return void\r\n     */\n\n\n    showModal(componentClass, modalInterfaceIN) {\n      var _a;\n\n      this._setScrollBody(true);\n\n      if (this._cntModal) {\n        this.set({\n          close: true,\n          submit: false,\n          open: false\n        });\n\n        this._closedModal();\n      }\n\n      this._cntModal = this._componentFactoryResolver.resolveComponentFactory(ModalDefaultComponent);\n      this._cntModalRef = modalInterfaceIN.component.vieContainerRef.createComponent(this._cntModal);\n      this._cntModalRef = this._initModalComponent(modalInterfaceIN.modal);\n      this._subscription = this._cntModalRef.instance.action.subscribe(resp => {\n        if (resp.close) {\n          this.set({\n            close: true,\n            submit: false,\n            open: false\n          });\n        } else if (resp.submit) {\n          this.set({\n            submit: true,\n            close: false,\n            open: false\n          });\n        }\n\n        this._closedModal();\n\n        return this._$closeModal.asObservable();\n      });\n      this._paramsForModal.component = componentClass;\n      this._paramsForModal.params = (_a = modalInterfaceIN === null || modalInterfaceIN === void 0 ? void 0 : modalInterfaceIN.component) === null || _a === void 0 ? void 0 : _a.paramsComponent;\n      this._cntModalRef.instance.customComponent = this._paramsForModal;\n      this.set({\n        open: true,\n        submit: false,\n        close: false\n      });\n      return this._$closeModal.asObservable();\n    }\n    /**\r\n     * this method closes the modal\r\n     */\n\n\n    closeModal() {\n      this._closedModal();\n    }\n\n    get() {\n      return Object.assign({}, this._state);\n    }\n\n    set(value) {\n      this._state = Object.assign({}, value);\n\n      this._$closeModal.next(this.get());\n    }\n    /**\r\n     * @description This method destroy the cnt of modal\r\n     * @private\r\n     * @return void\r\n     */\n\n\n    _closedModal() {\n      this._setScrollBody(false);\n\n      this._cntModalRef.destroy();\n\n      this._cntModal = null;\n\n      this._subscription.unsubscribe();\n    }\n    /**\r\n     * @description This method set params to component Modal\r\n     * @param modalInterfaceIN configuration modal\r\n     * @private\r\n     * @return ComponentRef<ModalDefaultComponent>\r\n     */\n\n\n    _initModalComponent(modalInterfaceIN) {\n      const keys = Object.keys(modalInterfaceIN);\n      keys.forEach(item => {\n        this._cntModalRef.instance[item] = modalInterfaceIN[item];\n      });\n\n      this._cntModalRef.instance.refreshView();\n\n      return this._cntModalRef;\n    }\n    /**\r\n     * @description Set scroll to body\r\n     * @param value boolean\r\n     * @private\r\n     * @return void\r\n     */\n\n\n    _setScrollBody(value) {\n      if (value) {\n        document.body.style.overflow = globalConstant.GENERAL_STYLES.HIDDEN;\n      } else {\n        document.body.style.overflow = globalConstant.GENERAL_STYLES.AUTO;\n      }\n    }\n\n  }\n\n  ModalServiceDefaultService.ɵfac = function ModalServiceDefaultService_Factory(t) {\n    return new (t || ModalServiceDefaultService)(i0.ɵɵinject(i0.ComponentFactoryResolver));\n  };\n\n  ModalServiceDefaultService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalServiceDefaultService,\n    factory: ModalServiceDefaultService.ɵfac\n  });\n  return ModalServiceDefaultService;\n})();","map":null,"metadata":{},"sourceType":"module"}