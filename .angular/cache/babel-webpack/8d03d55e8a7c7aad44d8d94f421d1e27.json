{"ast":null,"code":"export class ValueAccessorBase {\n  constructor() {\n    this.changed = new Array();\n    this.touched = new Array();\n  }\n\n  get value() {\n    return this.innerValue;\n  }\n\n  set value(value) {\n    if (this.innerValue !== value) {\n      if (this.type === 'number' && Number(value)) {\n        this.innerValue = Number(value);\n        this.changed.forEach(f => f(Number(value)));\n      } else {\n        this.innerValue = value;\n        this.changed.forEach(f => f(value));\n      }\n    }\n  }\n\n  writeValue(value) {\n    this.innerValue = value;\n  }\n\n  registerOnChange(fn) {\n    this.changed.push(fn);\n  }\n\n  registerOnTouched(fn) {\n    this.touched.push(fn);\n  }\n\n  touch() {\n    this.touched.forEach(f => f());\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}