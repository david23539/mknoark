{"ast":null,"code":"import { ChangeDetectorRef, EventEmitter, QueryList } from '@angular/core';\nimport { NgForm, NgModel } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { delay, filter, takeUntil } from 'rxjs/operators';\nimport { globalConstant } from '../../utils/constant';\nimport { ValidationControlService } from '../service/validation-control.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/validation-control.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../button/button-default/button-default.component\";\nconst _c0 = [\"*\"];\nexport let FormDefaultComponent = /*#__PURE__*/(() => {\n  class FormDefaultComponent {\n    constructor(_validationService, _cdr) {\n      this._validationService = _validationService;\n      this._cdr = _cdr;\n      this.send = new EventEmitter();\n      this.typeButtom = globalConstant.COLOR_TYPES.DISABLED;\n      this._destroy$ = new Subject();\n    }\n\n    set models(value) {\n      this._models = value;\n\n      if (this.form) {\n        const ngContentModel = value.toArray();\n        ngContentModel.forEach(model => {\n          this.form.addControl(model);\n        });\n      }\n    }\n\n    ngAfterViewInit() {\n      this._cdr.detectChanges();\n\n      const ngContentModel = this._models.toArray();\n\n      ngContentModel.forEach(model => {\n        this.form.addControl(model);\n      });\n      this.updateModelValidation();\n    }\n\n    updateModelValidation() {\n      this._validationService.$getInvalidComponent().pipe(filter(res => res !== undefined), delay(0), takeUntil(this._destroy$)).subscribe(validation => {\n        var _a;\n\n        (_a = this.form.form.get(validation.model.name)) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();\n\n        this._cdr.detectChanges();\n      });\n    }\n\n    sendData(data) {\n      if (this.form.valid) {\n        this.send.emit({\n          data\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroy$.unsubscribe();\n    }\n\n  }\n\n  FormDefaultComponent.ɵfac = function FormDefaultComponent_Factory(t) {\n    return new (t || FormDefaultComponent)(i0.ɵɵdirectiveInject(i1.ValidationControlService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  FormDefaultComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormDefaultComponent,\n    selectors: [[\"nk-form-default\"]],\n    contentQueries: function FormDefaultComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgModel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.models = _t);\n      }\n    },\n    viewQuery: function FormDefaultComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(NgForm, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.form = _t.first);\n      }\n    },\n    inputs: {\n      textButton: \"textButton\",\n      isLoading: \"isLoading\",\n      pristine: \"pristine\"\n    },\n    outputs: {\n      send: \"send\"\n    },\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 3,\n    consts: [[\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"ngSubmit\"], [\"form\", \"ngForm\"], [1, \"container__col-12\"], [3, \"isLoading\", \"typeButton\"]],\n    template: function FormDefaultComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"form\", 0, 1);\n        i0.ɵɵlistener(\"ngSubmit\", function FormDefaultComponent_Template_form_ngSubmit_0_listener() {\n          i0.ɵɵrestoreView(_r1);\n\n          const _r0 = i0.ɵɵreference(1);\n\n          return ctx.sendData(_r0.value);\n        });\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"nk-button-default\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"isLoading\", ctx.isLoading)(\"typeButton\", _r0.valid ? \"success\" : \"disabled\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.textButton ? ctx.textButton : \"Enviar\", \" \");\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i3.ButtonDefaultComponent],\n    styles: [\"form[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;align-items:baseline}\"]\n  });\n  return FormDefaultComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}