{"ast":null,"code":"import { ElementRef, Renderer2, RendererFactory2 } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CookiesService } from '../../service/cookies/cookies.service';\nimport { globalConstant } from '../../utils/constant';\nimport { Literal } from '../../utils/literal';\nimport { literalsCookie } from '../literals';\nimport * as i0 from \"@angular/core\";\nexport let CookieDefaultService = /*#__PURE__*/(() => {\n  class CookieDefaultService {\n    constructor(renderFactory) {\n      this.renderFactory = renderFactory;\n      this.$closeCookie = new BehaviorSubject(this.get());\n      this.render = this.renderFactory.createRenderer(document.body, null);\n      this.mutationState = {\n        statusCookie: true\n      };\n    }\n    /**\r\n     *\r\n     * @param redirect params to redirect view policy\r\n     * @param textPolicy text to view in cookie (optional)\r\n     * @return void\r\n     */\n\n\n    showCookie(redirect, textPolicy = null) {\n      this.lang = CookiesService.getCookie('lang');\n      this.redirectPolicity = redirect;\n      this.policy = textPolicy;\n\n      if (this.cntCookie) {\n        this.render.removeChild(document.body, this.cntCookie);\n      }\n\n      this._initCookie();\n\n      this.render.appendChild(document.body, this.cntCookie);\n    }\n    /**\r\n     * @description Transform a variable in observable\r\n     * @return Observable of type CookieInterface\r\n     */\n\n\n    getChangeCookie$() {\n      return this.$closeCookie.asObservable();\n    }\n    /**\r\n     * @description Recover all change of state\r\n     * @return CookieInterface\r\n     */\n\n\n    get() {\n      return Object.assign({}, this.state);\n    }\n    /**\r\n     * @description Set value to state\r\n     * @param value of type CookieInterface\r\n     * @return void\r\n     */\n\n\n    set(value) {\n      this.state = Object.assign({}, value);\n      this.$closeCookie.next(this.get());\n    }\n    /**\r\n     * @description Create structure of cookie\r\n     * @return void\r\n     */\n\n\n    _initCookie() {\n      this.mutationState.statusCookie = true;\n      this.set(this.mutationState);\n      this.cntCookie = this.render.createElement('div');\n      this.render.addClass(this.cntCookie, 'cnt-cookie');\n\n      this._createBodyCookie();\n    }\n    /**\r\n     * @description Create body of cookie\r\n     * @private\r\n     * @return void\r\n     */\n\n\n    _createBodyCookie() {\n      var _a, _b, _c;\n\n      this.cookie = this.render.createElement('div');\n      this.render.addClass(this.cookie, 'cookie-default');\n      const textCookie = this.render.createText(this.policy ? this.policy : (_a = literalsCookie[this.lang]) === null || _a === void 0 ? void 0 : _a.MSG_SHORT_COOKIE);\n      const icon = this.render.createElement('div');\n      this.render.appendChild(this.cookie, icon);\n      this.render.addClass(icon, 'icon-nk-warning');\n      this.render.addClass(icon, 'icon-warning');\n      const button = this.render.createElement('button');\n      const textButton = this.render.createText((_b = Literal[this.lang]) === null || _b === void 0 ? void 0 : _b.ACCEPT);\n      this.render.appendChild(button, textButton);\n      this.render.addClass(button, 'cnt-button-cookie');\n      this.render.listen(button, globalConstant.EVENTS.CLICK, event => this._closeCookie());\n      const buttonMoreInfo = this.render.createElement('button');\n      const textButtonMoreInfo = this.render.createText((_c = Literal[this.lang]) === null || _c === void 0 ? void 0 : _c.MORE_INFO);\n      this.render.appendChild(buttonMoreInfo, textButtonMoreInfo);\n      this.render.addClass(buttonMoreInfo, 'more-info');\n      this.render.listen(buttonMoreInfo, globalConstant.EVENTS.CLICK, event => this._toRedirect());\n      this.render.appendChild(this.cookie, button);\n      this.render.appendChild(this.cookie, buttonMoreInfo);\n      this.render.appendChild(this.cookie, textCookie);\n      this.render.appendChild(this.cntCookie, this.cookie);\n    }\n    /**\r\n     * @description Close of cookie and send change of state\r\n     * @private\r\n     * @return void\r\n     */\n\n\n    _closeCookie() {\n      this.render.addClass(this.cntCookie, 'before-closed');\n      this.mutationState.statusCookie = false;\n      this.set(this.mutationState);\n      setTimeout(() => {\n        this.render.removeChild(document.body, this.cntCookie);\n        this.cntCookie = null;\n        this.render.destroy();\n      }, 300);\n    }\n    /**\r\n     * @description Redirect to url in new tab\r\n     * @private\r\n     * @return void\r\n     */\n\n\n    _toRedirect() {\n      window.open(this.redirectPolicity, globalConstant.GENERAL.BLANK);\n    }\n\n  }\n\n  CookieDefaultService.ɵfac = function CookieDefaultService_Factory(t) {\n    return new (t || CookieDefaultService)(i0.ɵɵinject(i0.RendererFactory2));\n  };\n\n  CookieDefaultService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieDefaultService,\n    factory: CookieDefaultService.ɵfac\n  });\n  return CookieDefaultService;\n})();","map":null,"metadata":{},"sourceType":"module"}