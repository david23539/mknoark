{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { message, validate } from './validate';\nimport { ValueAccessorBase } from './value-accessor-base';\nexport class ElementBase extends ValueAccessorBase {\n  constructor(validators, asyncValidators) {\n    super();\n    this.validators = validators;\n    this.asyncValidators = asyncValidators;\n  }\n\n  validate() {\n    if (this.model && (this.model.control.touched || this.model.control.dirty || this.model.value)) {\n      return validate(this.validators, this.asyncValidators)(this.model.control);\n    } else {\n      return of(null);\n    }\n  }\n\n  get invalid() {\n    return this.validate().pipe(map(v => Object.keys(v || {}).length > 0));\n  }\n\n  get failures() {\n    return this.validate().pipe(map(v => Object.keys(v).map(k => message(v, k))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}