{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { CookiesService } from '../service/cookies/cookies.service';\nimport { Literal } from '../utils/literal';\n\nconst normalizeValidator = validator => {\n  const func = validator.validate.bind(validator);\n\n  if (typeof func === 'function') {\n    return c => func(c);\n  } else {\n    return validator;\n  }\n};\n\nexport const composeValidators = validators => {\n  if (validators == null || validators.length === 0) {\n    return null;\n  }\n\n  return Validators.compose(validators.map(normalizeValidator));\n};\nexport const validate = (validators, asyncValidators) => control => {\n  const synchronousValid = () => composeValidators(validators)(control);\n\n  if (asyncValidators) {\n    const asyncValidator = composeValidators(asyncValidators);\n    return asyncValidator(control).map(v => {\n      const secondary = synchronousValid();\n\n      if (secondary || v) {\n        // compose async and sync validator results\n        return Object.assign({}, secondary, v);\n      }\n    });\n  }\n\n  if (validators) {\n    return of(synchronousValid());\n  }\n\n  return of(null);\n};\nexport const message = (validator, key) => {\n  const minlength = validator.minlength;\n  const maxlength = validator.maxlength;\n  const minNumber = validator.min;\n  const maxNumber = validator.max;\n  const language = CookiesService.getCookie('lang'); // const language = ;\n\n  switch (key) {\n    case 'required':\n      return Literal[language].PLEASE_ENTER_VALUE;\n\n    case 'pattern':\n      return Literal[language].VALUE_DO_NOT_MATCH;\n\n    case 'minlength':\n      return Literal[language].VALUE_MIN + minlength.requiredLength;\n\n    case 'maxlength':\n      return Literal[language].VALUE_MAX + maxlength.requiredLength;\n\n    case 'email':\n      return Literal[language].VALUE_EMAIL;\n\n    case 'min':\n      return Literal[language].MIN_NUMBER + minNumber.min;\n\n    case 'max':\n      return Literal[language].MAX_NUMBER + maxNumber.max;\n  }\n\n  switch (typeof validator[key]) {\n    case 'string':\n      return validator[key];\n\n    default:\n      return `Validation failed: ${key}`;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}