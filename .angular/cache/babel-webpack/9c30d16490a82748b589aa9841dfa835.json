{"ast":null,"code":"import { ApplicationRef, ComponentFactory, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injector } from '@angular/core';\nimport { of, Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ButtonFloatComponent } from './button-float/button-float.component';\nimport * as i0 from \"@angular/core\";\nexport let ButtonFloatService = /*#__PURE__*/(() => {\n  class ButtonFloatService {\n    constructor(_componentFactoryResolver, _appRef, _injector) {\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._$clickedButton = new Subject();\n      this._unsubscribe = new Subject();\n    }\n\n    static _getRootNode(refComponent) {\n      return refComponent.hostView.rootNodes[0];\n    }\n    /**\r\n     * @description event that occurs when the service is removed\r\n     */\n\n\n    ngOnDestroy() {\n      this._unsubscribe.next();\n\n      this._unsubscribe.unsubscribe();\n    }\n    /**\r\n     * @description Show floating button\r\n     * @param icon\r\n     * @param bgColor\r\n     */\n\n\n    showButtonFloat(icon, bgColor) {\n      let isExist = false;\n\n      if (this._cntFloatButton) {\n        isExist = true;\n        this.closeFloatButton();\n      }\n\n      return this.setButtonData(icon, isExist, bgColor);\n    }\n    /**\r\n     * @description close the floating button\r\n     */\n\n\n    closeFloatButton() {\n      if (this._cntFloatButtonRef && this._appRef) {\n        this._cntFloatButtonRef.instance.clickedEvent.unsubscribe();\n\n        this._appRef.detachView(this._cntFloatButtonRef.hostView);\n\n        this._cntFloatButton = null;\n        this._cntFloatButtonRef = null;\n      }\n    }\n\n    get() {\n      return this._state;\n    }\n\n    set(value) {\n      this._state = value;\n\n      this._$clickedButton.next(this.get());\n    }\n    /**\r\n     * @description create the button\r\n     * @param icon\r\n     * @param isExist\r\n     * @param bgColor\r\n     * @private\r\n     */\n\n\n    setButtonData(icon, isExist, bgColor) {\n      this._cntFloatButton = this._componentFactoryResolver.resolveComponentFactory(ButtonFloatComponent);\n      timer(0).subscribe(() => {\n        this._cntFloatButtonRef = this._cntFloatButton.create(this._injector);\n\n        this._appRef.attachView(this._cntFloatButtonRef.hostView);\n\n        if (!this._appRef.components[0]) {\n          throw new Error('Button service launched before rendering starts');\n        }\n\n        this._appRef.components[0].location.nativeElement.appendChild(ButtonFloatService._getRootNode(this._cntFloatButtonRef));\n\n        this._cntFloatButtonRef.instance.icon = icon;\n\n        this._cntFloatButtonRef.instance.bgColor(bgColor);\n\n        this._cntFloatButtonRef.instance.clickedEvent.pipe(takeUntil(this._unsubscribe)).subscribe(res => {\n          this.set(true);\n        });\n      });\n      return !isExist ? this._$clickedButton.asObservable() : of();\n    }\n\n  }\n\n  ButtonFloatService.ɵfac = function ButtonFloatService_Factory(t) {\n    return new (t || ButtonFloatService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector));\n  };\n\n  ButtonFloatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ButtonFloatService,\n    factory: ButtonFloatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ButtonFloatService;\n})();","map":null,"metadata":{},"sourceType":"module"}